apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: "com.facebook.react"

project.ext.envConfigFiles = [
	qadebug: ".qa.env",
	qarelease: ".qa.env",
	stagedebug: ".stage.env",
	stagerelease: ".stage.env",
	productiondebug: ".production.env",
	productionrelease: ".production.env"
]

apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
apply from: 'version.gradle' 

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = true

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = io.github.react-native-community:jsc-android-intl:2026004.+`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.awesomeproject"
    flavorDimensions "buildtype"
    packagingOptions {
        jniLibs {
            jniLibs.useLegacyPackaging = true
            pickFirsts += ['lib/x86/libc++_shared.so', 'lib/x86_64/libjsc.so', 'lib/arm64-v8a/libjsc.so', 'lib/arm64-v8a/libc++_shared.so', 'lib/x86_64/libc++_shared.so', 'lib/armeabi-v7a/libc++_shared.so']
        }
    }
    defaultConfig {
        applicationId "com.awesomeproject"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            //universalApk true  // If true, also generate a universal APK
            include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"         
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            shrinkResources false
            minifyEnabled false
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            shrinkResources true
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
     productFlavors {
		qa {
			dimension 'buildtype'
			applicationIdSuffix ".dev"
		}
		stage {
			dimension 'buildtype'
			applicationIdSuffix ".dev"
		}
		production {
			dimension 'buildtype'
		}
	}

    lint {
        checkReleaseBuilds false
        disable 'InvalidPackage'
    }
}
dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
        implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"


    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
	implementation project(':react-native-config')

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

  // implementation 'com.datatheorem.android.trustkit:trustkit:1.1.3'
    def androidDependenciesVersion = "28.0.0"
    // Incluye los archivos .aar y .jar de DetectID SDK y SelfID 
    // implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation fileTree(include: ['*.aar'], dir: 'libs')

    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // Dependencias requeridas por Android
   implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.0'
    // Dependencias de Android para tener las mismas especificaciones de versión y evitar errores de ejecución
    implementation 'androidx.legacy:legacy-support-v4:1.0.0' 
    implementation 'androidx.mediarouter:mediarouter:1.2.2' 
    implementation 'androidx.vectordrawable:vectordrawable-animated:1.1.0'
    //Evita problemas causados por el límite de referencias en Android.
    implementation 'androidx.multidex:multidex:2.0.1'
        //Soporte para mensajería Push basada en la nube
    implementation 'com.google.firebase:firebase-core:18.0.3'
    implementation "com.google.firebase:firebase-messaging:21.1.0"
    //Esta dependencia es utilizada para la serialización y deserialización de objetos
    implementation 'com.google.code.gson:gson:2.8.6'
    //Estas dependencias son utilizadas para tener requerimientos http más rápidos
    implementation 'com.squareup.retrofit2:retrofit:2.6.4' 
    implementation 'com.squareup.retrofit2:converter-gson:2.6.4' 
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.11'
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.11'
    implementation 'com.squareup.okhttp3:okhttp-urlconnection:5.0.0-alpha.11'

    //Dependencias requeridas para firebase analytics y crashlytics
    implementation platform('com.google.firebase:firebase-bom:31.2.0')
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'

        //Dependencias requeridas por Android
    implementation 'com.google.dagger:dagger:2.37'
    implementation 'com.google.dagger:dagger-android-support:2.33' 
    annotationProcessor 'com.google.dagger:dagger-compiler:2.37' 
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.33'
    implementation 'com.google.android.gms:play-services-base:18.4.0'
    implementation 'com.google.android.gms:play-services-basement:18.3.0'
    implementation 'com.google.android.gms:play-services-auth:21.2.0'
    implementation 'com.google.android.gms:play-services-auth-api-phone:18.0.2'
    
    implementation 'com.android.volley:volley:1.2.1'

}
